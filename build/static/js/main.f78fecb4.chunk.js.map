{"version":3,"sources":["Components/App.js","Utils/CreateStoreUtils.js","Core/Logic/Init/InitManagers.js","Core/Constants/InitConstants.js","Store/CreateStore.js","Store/Reducers.js","Store/Manager.js","index.js","Core/Actions/InitActions.js"],"names":["App","className","createReducerList","reducers","reducerList","forEach","reducer","Object","keys","map","objectKey","reducerFunction","reducerWrapper","createLogicList","managers","managerList","manager","push","initMiddleware","history","storeMiddleware","routerMiddleware","dependencies","httpClient","axios","logicMiddleware","createLogicMiddleware","enhancers","undefined","window","__REDUX_DEVTOOLS_EXTENSION__","compose","applyMiddleware","routerReducer","router","connectRouter","apply","this","arguments","error","console","log","InitManagers","createLogic","type","process","dispatch","done","action","getState","createHashHistory","hashType","reducerManager","combineReducers","store","createStore","initializeStore","initCoreApp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAYeA,MARf,WACE,OACE,yBAAKC,UAAU,OAAf,iB,uFCgBEC,EAAoB,SAACC,GACvB,IAAIC,EAAc,GAOlB,OANAD,EAASE,SAAQ,SAAAC,GACbC,OAAOC,KAAKF,GAASG,KAAI,SAACC,GACtB,IAAIC,EAAkBL,EAAQI,GAC9BN,EAAYM,GAAaE,EAAeD,SAGzCP,GAKLS,EAAkB,SAACC,GAErB,IAAIC,EAAc,GAIlB,OAHAD,EAAST,SAAQ,SAAAW,GACbD,EAAYE,KAAKD,MAEdD,GAILG,EAAiB,SAACd,EAAaW,EAAaI,GAE9C,IAAMC,EAAkBC,YAAiBF,GAInCG,EAAe,CACjBC,WAAYC,GAIVC,EAAkBC,YAAsBX,EAAaO,GAmB3D,MAAO,CAACK,eAlBoCC,IAAxCC,OAAOC,6BACKC,YACRC,YAAgBP,GAChBO,YAAgBZ,IAGRW,YACRC,YAAgBP,GAChBO,YAAgBZ,GAChBS,OAAOC,8BAAgCD,OAAOC,gCASnCL,kBAAiBQ,cALjB,aACfC,OAAQC,YAAchB,IACnBf,GAG4CkB,iBAIjDV,EAAiB,SAACD,GACpB,OAAO,WACH,IACI,OAAOA,EAAgByB,MAAMC,KAAMC,WACrC,MAAOC,GAEL,OADAC,QAAQC,IAAIF,GACLD,UAAU,M,4CCxEhBI,EAAe,CAVDC,YAAY,CACpCC,KCHqB,WDKfC,QAH8B,WAGFC,EAAUC,GAAO,OAAD,4GAAnCC,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,SAClBT,QAAQC,IAAI,SAAUO,EAAQ,WAAYC,GAE3CF,IAH8C,iD,EDCtB,WAAmC,IAAlC5C,EAAiC,uDAAtB,GAAIW,EAAkB,uDAAP,GAEhDK,EAAU+B,YAAkB,CAACC,SAAU,aACvC/C,EAAcF,EAAkBC,GAChCY,EAAcF,EAAgBC,GAJyB,EAM1BI,EAAed,EAAaW,EAAaI,GAArEQ,EANsD,EAMtDA,UAAWM,EAN2C,EAM3CA,cAEZmB,EAAiBC,YAAgBpB,GACjCqB,EAAQC,YAAYH,EAAgBzB,GAE1C,MAAO,CAAC2B,QAAOnC,WGdMqC,CAAgB,CCD1B,ICCD,YAETd,IFFEY,E,EAAAA,MAAOnC,E,EAAAA,Q,YGKDsC,EAAc,WAA+B,IAA9BH,EAA6B,uDAArB,GAClCI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,UAI5BR,EAAMR,SCjBK,CACHF,KLHgB,aIoBxBa,EAAYH,EAAOnC,K","file":"static/js/main.f78fecb4.chunk.js","sourcesContent":["import React from 'react';\nimport '../Styles/App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      Sei Nell'app\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable array-callback-return */\nimport {createHashHistory} from \"history\";\nimport {routerMiddleware, connectRouter} from \"connected-react-router\";\nimport * as axios from \"axios\";\nimport {createLogicMiddleware} from \"redux-logic\";\nimport {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\n\nexport const initializeStore = (reducers = [], managers = []) => {\n\n    const history = createHashHistory({hashType: \"hashbang\"});\n    const reducerList = createReducerList(reducers);\n    const managerList = createLogicList(managers);\n\n    const {enhancers, routerReducer} = initMiddleware(reducerList, managerList, history);\n\n    const reducerManager = combineReducers(routerReducer);\n    const store = createStore(reducerManager, enhancers);\n\n    return {store, history};\n};\n\n// Create ReducerList\nconst createReducerList = (reducers) => {\n    let reducerList = [];\n    reducers.forEach(reducer => {\n        Object.keys(reducer).map((objectKey) => {\n            let reducerFunction = reducer[objectKey];\n            reducerList[objectKey] = reducerWrapper(reducerFunction);\n        })\n    });\n    return reducerList;\n};\n\n\n// Create LogicList\nconst createLogicList = (managers) => {\n\n    let managerList = [];\n    managers.forEach(manager => {\n        managerList.push(manager);\n    });\n    return managerList\n};\n\n// Initialized Middleware\nconst initMiddleware = (reducerList, managerList, history) => {\n    //Add Middleware to store\n    const storeMiddleware = routerMiddleware(history);\n\n    //I Can Combine mor enhancer to store like: logic middleware, redux-route, ...\n    let enhancers;\n    const dependencies = {\n        httpClient: axios\n    };\n\n    // Apply middleware to Logic\n    const logicMiddleware = createLogicMiddleware(managerList, dependencies);\n    if (window.__REDUX_DEVTOOLS_EXTENSION__ === undefined) {\n        enhancers = compose(\n            applyMiddleware(logicMiddleware),\n            applyMiddleware(storeMiddleware),\n        );\n    } else {\n        enhancers = compose(\n            applyMiddleware(logicMiddleware),\n            applyMiddleware(storeMiddleware),\n            window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n        );\n    }\n\n    const routerReducer = {\n        router: connectRouter(history),\n        ...reducerList\n    };\n\n    return {enhancers, logicMiddleware, routerReducer, dependencies}\n};\n\n// Create Wrapper To manage Error from reducers\nconst reducerWrapper = (reducerFunction) => {\n    return function () {\n        try {\n            return reducerFunction.apply(this, arguments);\n        } catch (error) {\n            console.log(error);\n            return arguments[0];\n        }\n    }\n};\n","import {createLogic} from \"redux-logic\";\nimport {INIT_APP} from \"../../Constants/InitConstants\";\n\nexport const InitManager = createLogic({\n   type: INIT_APP,\n\n   async process({action, getState}, dispatch, done) {\n        console.log('action', action, 'getState', getState );\n       // Todo make an init action eg.: dispatch(funcExampleDispatched());\n       done();\n   }\n});\n\nexport const InitManagers = [\n    InitManager\n];\n","/** ACTIONS **/\nexport const INIT_APP = 'INIT_APP';\n","import {initializeStore} from \"../Utils/CreateStoreUtils\";\nimport reducers from \"./Reducers\";\nimport managers from \"./Manager\";\n\nconst {store, history} = initializeStore([reducers], managers);\n\nexport {store, history}\n","\n\n\nexport default {\n\n    /*Insert Reducers*/\n};\n","import {InitManagers} from \"../Core/Logic/Init/InitManagers\";\n\n\n\nconst managers = [\n  /* Init */\n  ...InitManagers,\n  /*Insert Managers*/\n];\n\nexport default managers;\n","import React from 'react';\nimport App from './Components/App';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.css';\nimport {history, store} from \"./Store/CreateStore\";\nimport {initApp} from \"./Core/Actions/InitActions\";\nimport {Provider} from \"react-redux\";\n\n\nexport const initCoreApp = (store = {}, history = {}) => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App/>\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n};\n\nstore.dispatch(initApp());\ninitCoreApp(store, history);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n","import {INIT_APP} from \"../Constants/InitConstants\";\n\nexport function initApp() {\n    return {\n        type: INIT_APP,\n    }\n}\n"],"sourceRoot":""}